/*работает для docx*/
 /*   public static void readDocFile(String fileName)   {

        try {
            File file = new File(fileName);
            FileInputStream fis = new FileInputStream(file.getAbsolutePath());

            XWPFDocument document = new XWPFDocument(fis);

            List<XWPFParagraph> paragraphs = document.getParagraphs();

            System.out.println("Total no of paragraph "+paragraphs.size());
            for (XWPFParagraph para : paragraphs) {
                System.out.println(para.getText());
            }
            fis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }*/

/*while (!eof) {
                    if ( buff.read() == -1){
                        eof = true;
                    }else{
                        buff.read(buffer, 0, BUFFER_SIZE);
                        for (char s:buffer) {
                        bufferFinish[k++]= s;
                        }
                    }
                }*/




/*работающий код для xlsx*/
/*
try {
        File file = new File(fileName);
        Workbook wb = WorkbookFactory.create(file);
        Sheet sheet = wb.getSheetAt(0);
        Iterator<Row> rows = sheet.rowIterator();
        while (rows.hasNext()) {
        Row row = rows.next();

        Iterator<Cell> cell = row.cellIterator();
        while(cell.hasNext()) {
        System.out.println(cell.next());
        }
        }
        }catch (IOException | InvalidFormatException e){}*/



   /* public static Charset guessCharset(InputStream is) throws IOException {
        return Charset.forName(new TikaEncodingDetector().guessEncoding(is));
    }*/

/*    public void ContextMenu(ContextMenu contextMenuEvent) {
        File file = new File(returnPath(tree, fileFinder.rootDirname).toUri());

        if (file.isDirectory()){
            warningLabel.setText("It's a directory!");
        }else{

            TextArea textArea = new TextArea();
            Tab tab = new Tab();
            tab.setText(file.toPath().getFileName().toString());

            try (FileInputStream fileInputStream = new FileInputStream(file)) {

                if (file.getName().endsWith(".log") | file.getName().endsWith(".txt")) {

                    BufferedReader buff = new BufferedReader(new InputStreamReader(fileInputStream, "windows-1251"));
                    String line;
                    while ((line = buff.readLine()) != null) {
                        textArea.appendText(line);
                        if (!(line.trim().isEmpty())) {
                            textArea.appendText("\n");
                        }
                    }

                } else if (file.getName().endsWith(".docx")) {

                    XWPFDocument document = new XWPFDocument(fileInputStream);
                    List<XWPFParagraph> paragraphs = document.getParagraphs();
                    for (XWPFParagraph para : paragraphs) { //по линиям разбиваем
                        textArea.appendText(para.getText());
                    }

                } else if (file.getName().endsWith(".xlsx")) {

                    Workbook wb = WorkbookFactory.create(fileInputStream);
                    Sheet sheet = wb.getSheetAt(0);
                    Iterator<Row> rows = sheet.rowIterator();
                    while (rows.hasNext()) {
                        Row row = rows.next();
                        Iterator<Cell> cell = row.cellIterator();
                        while (cell.hasNext()) {
                            textArea.appendText(cell.next().toString());
                            textArea.appendText(" ");
                        }
                        textArea.appendText("\n");
                    }
                }
            }catch (IOException | InvalidFormatException e){ warningLabel.setText("Error: " + e.getMessage());}

            tab.setContent(textArea);
            tabPane.getTabs().add(tab);

        }
    }*/















       /* try {
            TextArea textArea = new TextArea();
            Tab tab = new Tab();
            tab.setText("jfvkf.docx");

            File file = new File("C:\\files\\jfvkf.docx");
            FileInputStream fis = new FileInputStream(file.getAbsolutePath());

            XWPFDocument document = new XWPFDocument(fis);

            List<XWPFParagraph> paragraphs = document.getParagraphs();

            System.out.println("Total no of paragraph "+paragraphs.size());
            for (XWPFParagraph para : paragraphs) {
                System.out.println(para.getText());
                textArea.appendText(para.getText());
                System.out.println(para.getText());
                if (!(para.getText().trim().isEmpty())){
                    textArea.appendText("\n");
                }
            }

            tab.setContent(textArea);
            tabPane.getTabs().add(tab);

            fis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }*/


/*    public void buildBranch(Path path, TreeItem<String> root, int i) {
        finish:
        while (i<path.getNameCount()){
            if (!(root.getChildren().isEmpty())) { //если рута не пустая то заходим в неё
                for (TreeItem<String> item : root.getChildren()){ // начинаем обходить директорию

                    if (item.getValue().toString().equals(path.subpath(i,i+1).toString())) //если есть то шагаем вглубь
                    {
                        buildBranch(path, item ,++i);
                        break finish;
                    }
                }
                makeBranch(path.subpath(i,i+1).toString(),root); // если нету такой папки, то добавляем
            } else {
                makeBranch(path.subpath(i,i+1).toString(), root); // создание первого элемента в директории
            }
        }
    }*/

/*    public void buildBranch(Path path, TreeItem<String> root, int i) {
        finish:
        while (i<path.getNameCount()){
            if (!(root.getChildren().isEmpty())) { //если рута не пустая то заходим в неё
                for (TreeItem<String> item : root.getChildren()){ // начинаем обходить директорию

                    if (item.getValue().toString().equals(path.subpath(i,i+1).toString())) //если есть то шагаем вглубь
                    {
                        buildBranch(path, item ,++i);
                        break finish;
                    }
                }
                makeBranch(path.subpath(i,i+1).toString(),root); // если нету такой папки, то добавляем и шагаем вглубь
                //   buildBranch(path, root,i);
                //   break finish;
            } else {
                makeBranch(path.subpath(i,i+1).toString(), root); // создание первого элемента в директории
            }
        }
    }
*/


/*
    public void buildBranch(String[] arrPath, TreeItem<String> root, int i) {
        finish:
        while (i<=arrPath.length-1){
            if (!(root.getChildren().isEmpty())) { //если рута не пустая то заходим в неё
                for (TreeItem<String> item : root.getChildren()){ // начинаем обходить директорию

                    if (item.getValue().toString().equals(arrPath[i])) //если есть то шагаем вглубь
                    {
                        buildBranch(arrPath, item ,++i);
                        break finish;
                    }
                }
                makeBranch(arrPath[i],root); // если нету такой папки, то добавляем и шагаем вглубь
                buildBranch(arrPath, root,i);
                break finish;
            } else {
                makeBranch(arrPath[i], root); // создание первого элемента в директории
            }
        }
    }*/


/*
long start = System.currentTimeMillis();
            System.out.println(System.currentTimeMillis() - start);
* */

          /*  InputStream in=null;
            FileOutputStream fOut=null;

            try{
                URL remoteFile=new URL("file:////NASTYADELL//files//ttr.txt");

                File file = new File(remoteFile.toURI());
                if(file.exists()){
                    System.out.println("true");}
                else
                {
                    System.out.println("false");
                }

                URLConnection fileStream=remoteFile.openConnection();

                System.out.println(fileStream.getContentType());

                // Open output and input streams
                fOut=new FileOutputStream("xxx.txt");

                in=fileStream.getInputStream();

                // Save
                int data;
                while((data=in.read())!=-1){
                    fOut.write(data);
                }

            } catch (Exception e){
                e.printStackTrace();
            } finally{
                try{
                    in.close();
                    fOut.close();
                } catch(Exception e){e.printStackTrace();}
            }*/